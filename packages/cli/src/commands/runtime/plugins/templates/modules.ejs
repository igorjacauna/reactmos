import { hooks, App } from 'reactmos';

import moduleConfig from './src/module.config';

<% if (extendModules && extendModules.length) { %>
  <% extendModules.forEach(function(dep, index) { %>
import depConfig<%= index %> from '<%= dep %>';
  <% }); %>
<% } %>

let initialized = false;
let routes = [];
let root = null;

export async function boot() {
  routes = (await Promise.resolve(moduleConfig.routes?.())) || [];
  hooks.addHooks(moduleConfig.hooks);
  root = moduleConfig.root;

<% if (extendModules && extendModules.length) { %>
  <% extendModules.forEach(function(dep, index) { %>
  const depRoutes<%= index %> = (await Promise.resolve(depConfig<%= index %>.routes?.())) || [];
  routes = routes.concat(depRoutes<%= index %>);

  hooks.addHooks(depConfig<%= index %>.hooks);

  if (!root) {
    root = depConfig<%= index %>.root;
  }
  <% }); %>
<% } %>
  initialized = true;
  await hooks.callHook('app:afterBoot');
}

export function getRoutes() {
  if (!initialized) {
    throw new Error('Modules not initialized');
  }
  return routes;
}

export function getRoot() {
  return root || App;
}

boot();

