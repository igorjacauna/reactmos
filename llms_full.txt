# Introduction

Reactmos comes from **REACT MOduleS**. The idea is to create SPA applications with React using separate modules. You can progressively expand your application.

::warning
Reactmos is under heavy development. Use with caution. Many things may change
::

For now, these are the implemented features:

::card-group
  :::card
  ---
  target: _blank
  title: Modules
  to: https://reactmos.dev/features/modules
  ---
  How create and extends modules
  :::

  :::card
  ---
  target: _blank
  title: Routes
  to: https://reactmos.dev/features/routes
  ---
  How configure routes
  :::

  :::card{target="_blank" title="Hooks" to="https://reactmos.dev/features/hooks"}
  Use lifecycle hooks and custom hooks
  :::

  :::card
  ---
  target: _blank
  title: Extra configs
  to: https://reactmos.dev/features/extra-configs
  ---
  Share extra configs between modules
  :::
::

## Roadmap

We have planned the following for the future:

- **publicDir**: Use modules public directories to serve static assets
- **loadingHTML**: Use a HTML file as a loading screen until the boot proccess finish. This can be overridden by a module.
- Anything else...


# Installation

::warning
Reactmos is under heavy development. Use with caution.
::

## Quick Start

You can start a fresh new project with:

```bash [Terminal]
pnpm create reactmos my-module
```

or create a new project with:

1. Install `reactmos`: `pnpm add reactmos`
2. Add `@reactmos/cli` as development dependency: `pnpm add -D @reactmos/cli`
3. Add the scripts to `package.json`:

```json
"dev": "reactmox dev",
"build": "reactmox build"
```

4. Create a configuration file in `src/module.config.ts`

```ts
export default {
  moduleName: 'my-module'
}
```

That's it! You can now start writing your application!


# Usage

This is only a basic example of what you can achieve with Reactmos, you can tweak it to match your needs.

::warning
Reactmos is under heavy development. Use with caution.
::

## Configure routes

You can create the Pages components in `src/pages` and configure the route in `src/module.config.ts` as:

```ts [module.config.ts]
import MyPage from './pages/MyPage'

export default {
  routes: () => ([
    {
      path: '/my-page',
      Component: MyPage,
    },
  ])
}
```

::note{to="https://reactmos.dev/features/routes"}
See more about how configure routes
::

## Root

If your module does not have a root component to use, the first extended module with a configured root component will be used. Otherwise, Reactmos will display a default root component warning, prompting you to create a root component.

```ts [module.config.ts]
import App from './src/App'

export default {
  root: App
}
```

::note{to="https://reactmos.dev/features/root"}
Learn more about root component
::

### Hooks

Your module can configure lifecycle hooks to run like this:

```ts [module.config.ts]
export default {
  hooks: {
    'app:beforeRender': () => {
      // Run some code before render root component
    }
  }
}
```

::note{to="https://reactmos.dev/features/hooks"}
Learn more about hooks usage
::

### Extends

To extends a module, just add:

```ts [module.config.ts]
export default {
  extends: ['module-foo', '../module-bar']
}
```

::tip
When using a path, it is relative to the project root and not the `src` directory.
::

::note{to="https://reactmos.dev/features/modules"}
Learn more about module extends
::

### Extra configs

If you want to share something with other modules, you can do it like this:

```ts [module.config.ts]
export default {
  extras: {
    menuEntries: [],
    extFn() {}
  }
}
```
